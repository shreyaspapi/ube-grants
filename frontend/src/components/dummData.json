{
  "title": "# MilestoneDao",
  "description": "This smart contract will allow users to submit proposals for projects or tasks, along with milestones for the project or task. Other users will be able to review and vote on the proposals, and the proposal with the most votes will be selected for implementation.\n\n",
  "milestones": [
    {
      "description": "### Milestone 1\n#### Features\n\n1. Users can submit proposals and milestones for projects or tasks\n2. Proposals and milestones can be reviewed and voted on by other users\n3. The proposal with the most votes will be selected for implementation\n4. The contract will keep track of the status of each proposal (e.g. submitted, under review, approved, rejected)\n\n### Functions\nThe contract will have the following functions:\n\n1. submitProposal(proposal: string, milestones: string[]): This function allows a user to submit a proposal for a project or task, along with a list of milestones for the project or task. The function will store the proposal and milestones in the contract's storage.\n\n2. vote(proposalId: string, vote: bool): This function allows a user to cast a vote for a proposal. The proposalId argument is the ID of the proposal to vote for, and the vote argument is a boolean value indicating whether the user is voting for or against the proposal. The function will update the vote count for the proposal in the contract's storage.\n\n3. getProposal(proposalId: string): This function returns the details of a proposal, including the proposal itself, the list of milestones, the current vote count, and the status of the proposal.\n\n4. getProposals(): This function returns a list of all the proposals that have been submitted to the contract, along with their details.\n",
      "amount": 7,
      "milestoneKey": 0
    },
    {
      "milestoneKey": 1,
      "description": "### Milestone 1\n#### Features\n\n1. [https://nemo-landing-page.netlify.app/images/happy_music.svg](https://nemo-landing-page.netlify.app/images/happy_music.svg) Users can submit proposals and milestones for projects or tasks\n2. Proposals and milestones can be reviewed and voted on by other users\n3. The proposal with the most votes will be selected for implementation\n4. The contract will keep track of the status of each proposal (e.g. submitted, under review, approved, rejected)\n\n### Functions\nThe contract will have the following functions:\n\n1. submitProposal(proposal: string, milestones: string[]): This function allows a user to submit a proposal for a project or task, along with a list of milestones for the project or task. The function will store the proposal and milestones in the contract's storage.\n\n2. vote(proposalId: string, vote: bool): This function allows a user to cast a vote for a proposal. The proposalId argument is the ID of the proposal to vote for, and the vote argument is a boolean value indicating whether the user is voting for or against the proposal. The function will update the vote count for the proposal in the contract's storage.\n\n3. getProposal(proposalId: string): This function returns the details of a proposal, including the proposal itself, the list of milestones, the current vote count, and the status of the proposal.\n\n4. getProposals(): This function returns a list of all the proposals that have been submitted to the contract, along with their details.\n",
      "amount": 10
    },
    {
      "milestoneKey": 2,
      "description": "### Milestone 1\n#### Features\n\n1. Users can submit proposals and milestones for projects or tasks\n2. Proposals and milestones can be reviewed and voted on by other users\n3. The proposal with the most votes will be selected for implementation\n4. The contract will keep track of the status of each proposal (e.g. submitted, under review, approved, rejected)\n\n### Functions\nThe contract will have the following functions:\n\n1. submitProposal(proposal: string, milestones: string[]): This function allows a user to submit a proposal for a project or task, along with a list of milestones for the project or task. The function will store the proposal and milestones in the contract's storage.\n\n2. vote(proposalId: string, vote: bool): This function allows a user to cast a vote for a proposal. The proposalId argument is the ID of the proposal to vote for, and the vote argument is a boolean value indicating whether the user is voting for or against the proposal. The function will update the vote count for the proposal in the contract's storage.\n\n3. getProposal(proposalId: string): This function returns the details of a proposal, including the proposal itself, the list of milestones, the current vote count, and the status of the proposal.\n\n4. getProposals(): This function returns a list of all the proposals that have been submitted to the contract, along with their details.\n",
      "amount": 10
    },
    {
      "milestoneKey": 3,
      "description": "### Milestone 1\n#### Features\n\n1. Users can submit proposals and milestones for projects or tasks\n2. Proposals and milestones can be reviewed and voted on by other users\n3. The proposal with the most votes will be selected for implementation\n4. The contract will keep track of the status of each proposal (e.g. submitted, under review, approved, rejected)\n\n### Functions\nThe contract will have the following functions:\n\n1. submitProposal(proposal: string, milestones: string[]): This function allows a user to submit a proposal for a project or task, along with a list of milestones for the project or task. The function will store the proposal and milestones in the contract's storage.\n\n2. vote(proposalId: string, vote: bool): This function allows a user to cast a vote for a proposal. The proposalId argument is the ID of the proposal to vote for, and the vote argument is a boolean value indicating whether the user is voting for or against the proposal. The function will update the vote count for the proposal in the contract's storage.\n\n3. getProposal(proposalId: string): This function returns the details of a proposal, including the proposal itself, the list of milestones, the current vote count, and the status of the proposal.\n\n4. getProposals(): This function returns a list of all the proposals that have been submitted to the contract, along with their details.\n",
      "amount": 5
    }
  ]
}
